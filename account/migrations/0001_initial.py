# Generated by Django 4.0.2 on 2023-08-10 12:55

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('settings', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ambulance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_number', models.CharField(max_length=40)),
                ('vehicle_model', models.CharField(max_length=40)),
                ('year_made', models.CharField(max_length=10)),
                ('driver_name', models.CharField(max_length=40)),
                ('driver_license', models.CharField(max_length=40)),
                ('driver_contact', models.CharField(max_length=20)),
                ('vehicle_type', models.CharField(choices=[('select', 'Select'), ('owner', 'Owner'), ('contractual', 'Contractual')], default='select', max_length=40)),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='BirthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('child_name', models.CharField(max_length=40)),
                ('gender', models.CharField(choices=[('select', 'Select'), ('male', 'Male'), ('female', 'Female'), ('transgender', 'Transgender')], default='select', max_length=20)),
                ('weight', models.CharField(max_length=40)),
                ('child_photo', models.ImageField(blank=True, null=True, upload_to='images/birthrecord/child/')),
                ('date_of_birth', models.DateTimeField()),
                ('phone', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=40)),
                ('case_id', models.CharField(max_length=40)),
                ('mother_name', models.CharField(max_length=40)),
                ('mother_photo', models.ImageField(blank=True, null=True, upload_to='images/birthrecord/mother/')),
                ('father_name', models.CharField(max_length=40)),
                ('father_photo', models.ImageField(blank=True, null=True, upload_to='images/birthrecord/father/')),
                ('report', models.TextField()),
                ('document_photo', models.ImageField(blank=True, null=True, upload_to='images/birthrecord/document/')),
            ],
        ),
        migrations.CreateModel(
            name='CallLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('phone', models.CharField(max_length=40)),
                ('date', models.DateField()),
                ('description', models.TextField()),
                ('nextdate', models.DateField()),
                ('call_duration', models.CharField(max_length=40)),
                ('note', models.TextField()),
                ('call_type', models.CharField(choices=[('incoming', 'Incoming'), ('outgoing', 'Outgoing')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='DeathRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_id', models.CharField(max_length=40)),
                ('patient_name', models.CharField(max_length=40)),
                ('death_date', models.DateTimeField()),
                ('guardian_name', models.CharField(max_length=40)),
                ('attachment', models.ImageField(blank=True, null=True, upload_to='images/deathrecord/')),
                ('report', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Dispatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_title', models.CharField(max_length=40)),
                ('reference_no', models.CharField(max_length=40)),
                ('address', models.TextField()),
                ('note', models.TextField()),
                ('from_title', models.CharField(max_length=40)),
                ('date', models.DateField()),
                ('document', models.FileField(blank=True, null=True, upload_to='images/postal/dispatch/')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(max_length=100)),
                ('unit', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('item_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.itemcategory')),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medicine_name', models.CharField(max_length=100)),
                ('medicine_company', models.CharField(max_length=100)),
                ('medicine_composition', models.CharField(max_length=100)),
                ('medicine_group', models.CharField(max_length=100)),
                ('unit', models.PositiveIntegerField()),
                ('min_level', models.PositiveIntegerField()),
                ('re_order_level', models.PositiveIntegerField()),
                ('tax', models.FloatField()),
                ('unit_packing', models.PositiveIntegerField()),
                ('vat_ac', models.CharField(max_length=100)),
                ('note', models.TextField()),
                ('medicine_photo', models.FileField(blank=True, null=True, upload_to='images/medicine/')),
                ('medicine_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.medicinecategory')),
            ],
        ),
        migrations.CreateModel(
            name='PathologyTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=100)),
                ('short_name', models.CharField(max_length=100)),
                ('test_type', models.CharField(max_length=100)),
                ('subcategory', models.CharField(max_length=100)),
                ('method', models.CharField(max_length=100)),
                ('report_days', models.PositiveIntegerField()),
                ('charge_category', models.CharField(choices=[('select', 'Select'), ('surgical pathology', 'Surgical Pathology'), ('histopathology', 'Histopathology'), ('cytopathology', 'Cytopathology'), ('forensic pathology', 'Forensic pathology'), ('dermatopathology', 'Dermatopathology'), ('x-ray', 'X-Ray'), ('other charges', 'Other Charges')], default='Select', max_length=100)),
                ('tax', models.FloatField(default='30.00')),
                ('standard_charge', models.FloatField(default='160.00')),
                ('amount', models.FloatField(default='208.00')),
                ('category_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.pathologycategory')),
            ],
        ),
        migrations.CreateModel(
            name='Receive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_title', models.CharField(max_length=40)),
                ('reference_no', models.CharField(max_length=40)),
                ('address', models.TextField()),
                ('note', models.TextField()),
                ('to_title', models.CharField(max_length=40)),
                ('date', models.DateField()),
                ('document', models.FileField(blank=True, null=True, upload_to='images/postal/receive/')),
            ],
        ),
        migrations.CreateModel(
            name='TPA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('code', models.CharField(max_length=40)),
                ('contact_no', models.CharField(max_length=40)),
                ('address', models.CharField(max_length=40)),
                ('contact_person_name', models.CharField(max_length=40)),
                ('contact_person_phone', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='WhiteCells',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whitecells', models.BooleanField(default=False)),
                ('bag', models.CharField(blank=True, max_length=20, null=True)),
                ('volume', models.CharField(blank=True, max_length=20, null=True)),
                ('lot', models.CharField(blank=True, max_length=20, null=True)),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.unittype')),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('phone', models.CharField(max_length=40)),
                ('id_card', models.CharField(max_length=40)),
                ('visit_to', models.CharField(choices=[('select', 'Select'), ('staff', 'Staff'), ('opd patient', 'OPD Patient'), ('ipd patient', 'IPD Patient')], default='select', max_length=40)),
                ('related_to', models.CharField(max_length=40)),
                ('number_of_person', models.PositiveIntegerField()),
                ('date', models.DateField()),
                ('in_time', models.TimeField()),
                ('out_time', models.TimeField()),
                ('note', models.TextField()),
                ('document', models.FileField(blank=True, null=True, upload_to='images/visitor/')),
                ('purpose', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.purpose')),
            ],
        ),
        migrations.CreateModel(
            name='TestParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_range', models.CharField(editable=False, max_length=40)),
                ('unit', models.CharField(editable=False, max_length=40)),
                ('pathology_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='account.pathologytest')),
                ('test_parameter_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.pathologyparameter')),
            ],
        ),
        migrations.CreateModel(
            name='ReferralPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referrer_name', models.CharField(max_length=100)),
                ('referrer_contact', models.CharField(max_length=100)),
                ('contact_person_name', models.CharField(max_length=100)),
                ('contact_person_phone', models.CharField(max_length=100)),
                ('commission', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('opd', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('ipd', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('pharmacy', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('radiology', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('pathology', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('bloodbank', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('ambulance', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.referralcategory')),
            ],
        ),
        migrations.CreateModel(
            name='RedCells',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redcells', models.BooleanField(default=False)),
                ('bag', models.CharField(blank=True, max_length=20, null=True)),
                ('volume', models.CharField(blank=True, max_length=20, null=True)),
                ('lot', models.CharField(blank=True, max_length=20, null=True)),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.unittype')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseMedicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_no', models.CharField(max_length=20)),
                ('expiry_date', models.DateField()),
                ('mrp', models.FloatField()),
                ('batch_amount', models.FloatField()),
                ('sale_price', models.FloatField()),
                ('packing_qty', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField()),
                ('purchase_price', models.FloatField()),
                ('tax', models.PositiveIntegerField(editable=False, null=True)),
                ('amount', models.FloatField()),
                ('medicine_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.medicinecategory')),
                ('medicine_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.medicine')),
            ],
        ),
        migrations.CreateModel(
            name='Platelets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platelets', models.BooleanField(default=False)),
                ('bag', models.CharField(blank=True, max_length=20, null=True)),
                ('volume', models.CharField(blank=True, max_length=20, null=True)),
                ('lot', models.CharField(blank=True, max_length=20, null=True)),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.unittype')),
            ],
        ),
        migrations.CreateModel(
            name='Plasma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plasma', models.BooleanField(default=False)),
                ('bag', models.CharField(blank=True, max_length=20, null=True)),
                ('volume', models.CharField(blank=True, max_length=20, null=True)),
                ('lot', models.CharField(blank=True, max_length=20, null=True)),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.unittype')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('guardian_name', models.CharField(max_length=30)),
                ('gender', models.CharField(choices=[('select', 'Select'), ('male', 'Male'), ('female', 'Female'), ('transgender', 'Transgender')], default='select', max_length=20)),
                ('date_of_birth', models.DateField()),
                ('year', models.PositiveIntegerField()),
                ('month', models.PositiveIntegerField()),
                ('day', models.PositiveIntegerField()),
                ('marital_status', models.CharField(choices=[('select', 'Select'), ('single', 'Single'), ('married', 'Married'), ('widowed', 'Widowed'), ('separated', 'Separated'), ('not specified', 'Not Specified')], default='select', max_length=20)),
                ('patient_image', models.ImageField(blank=True, null=True, upload_to='images/patient/')),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('address', models.CharField(max_length=100)),
                ('remarks', models.TextField()),
                ('allergies', models.TextField()),
                ('tpa_id', models.CharField(max_length=50)),
                ('tpa_validity', models.DateField()),
                ('identify_number', models.CharField(max_length=30)),
                ('alternate_number', models.CharField(blank=True, max_length=20, null=True)),
                ('blood_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.bloodbank_products')),
            ],
        ),
        migrations.CreateModel(
            name='OutPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('bp', models.FloatField()),
                ('pulse', models.FloatField()),
                ('temperature', models.FloatField()),
                ('respiration', models.FloatField()),
                ('symptoms_title', models.CharField(max_length=100)),
                ('symptoms_description', models.TextField()),
                ('note', models.TextField()),
                ('any_known_allergies', models.TextField()),
                ('previous_medical_issue', models.TextField()),
                ('appointment_date', models.DateTimeField()),
                ('case', models.CharField(max_length=100)),
                ('casualty', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='No', max_length=40)),
                ('old_patient', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='No', max_length=40)),
                ('reference', models.CharField(max_length=50)),
                ('tax', models.FloatField()),
                ('standard_charge', models.FloatField()),
                ('applied_charge', models.FloatField()),
                ('amount', models.FloatField()),
                ('payment_mode', models.CharField(choices=[('cash', 'Cash'), ('cheque', 'Cheque'), ('transfer to bank account', 'Transfer To Bank Account'), ('upi', 'UPI'), ('other', 'Other'), ('online', 'Online')], default='Cash', max_length=30)),
                ('paid_amount', models.FloatField()),
                ('live_consultation', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='No', max_length=30)),
                ('TPA', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.tpa')),
                ('charge_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.chargecategory')),
                ('symptoms_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.symptomstype')),
            ],
        ),
        migrations.CreateModel(
            name='ItemStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('purchase_price', models.FloatField()),
                ('date', models.DateField()),
                ('description', models.TextField()),
                ('document', models.FileField(blank=True, null=True, upload_to='images/itemstock/')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.item')),
                ('item_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.itemcategory')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.itemstore')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.itemsupplier')),
            ],
        ),
        migrations.CreateModel(
            name='InPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('bp', models.FloatField()),
                ('pulse', models.FloatField()),
                ('temperature', models.FloatField()),
                ('respiration', models.FloatField()),
                ('symptoms_title', models.CharField(max_length=100)),
                ('symptoms_description', models.TextField()),
                ('note', models.TextField()),
                ('previous_medical_issue', models.TextField()),
                ('admission_date', models.DateTimeField()),
                ('case', models.CharField(max_length=100)),
                ('casualty', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='No', max_length=40)),
                ('old_patient', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='No', max_length=40)),
                ('credit_limit', models.FloatField(default=20000)),
                ('reference', models.CharField(max_length=50)),
                ('live_consultation', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='No', max_length=30)),
                ('TPA', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.tpa')),
                ('bed_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.bedgroup')),
                ('bed_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.bed')),
                ('symptoms_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.symptomstype')),
            ],
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('invoice_number', models.CharField(max_length=40)),
                ('date', models.DateField()),
                ('amount', models.FloatField()),
                ('document', models.ImageField(blank=True, null=True, upload_to='images/income/')),
                ('description', models.TextField()),
                ('income_head', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.incomehead')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('invoice_number', models.CharField(max_length=40)),
                ('date', models.DateField()),
                ('amount', models.FloatField()),
                ('document', models.ImageField(blank=True, null=True, upload_to='images/expense/')),
                ('description', models.TextField()),
                ('expense_head', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.expensehead')),
            ],
        ),
        migrations.CreateModel(
            name='Cryodot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cryodot', models.BooleanField(default=False)),
                ('bag', models.CharField(blank=True, max_length=20, null=True)),
                ('volume', models.CharField(blank=True, max_length=20, null=True)),
                ('lot', models.CharField(blank=True, max_length=20, null=True)),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.unittype')),
            ],
        ),
        migrations.CreateModel(
            name='Cryo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platelets', models.BooleanField(default=False)),
                ('bag', models.CharField(blank=True, max_length=20, null=True)),
                ('volume', models.CharField(blank=True, max_length=20, null=True)),
                ('lot', models.CharField(blank=True, max_length=20, null=True)),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.unittype')),
            ],
        ),
        migrations.CreateModel(
            name='Components',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bag', models.PositiveIntegerField()),
                ('blood_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.bloodbank_products')),
                ('cryo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.cryo')),
                ('cryodot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.cryodot')),
                ('plasma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.plasma')),
                ('platelets', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.platelets')),
                ('redcells', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.redcells')),
                ('whitecells', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.whitecells')),
            ],
        ),
        migrations.CreateModel(
            name='Complain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complain_by', models.CharField(max_length=40)),
                ('phone', models.CharField(max_length=40)),
                ('date', models.DateField()),
                ('description', models.TextField()),
                ('action_taken', models.CharField(max_length=40)),
                ('assigned', models.CharField(max_length=40)),
                ('note', models.TextField()),
                ('document', models.FileField(blank=True, null=True, upload_to='images/complain/')),
                ('complain_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.complaintype')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.source')),
            ],
        ),
        migrations.CreateModel(
            name='BloodDonor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donor_name', models.CharField(max_length=100)),
                ('d_o_b', models.DateField()),
                ('gender', models.CharField(choices=[('select', 'Select'), ('male', 'Male'), ('female', 'Female'), ('transgender', 'Transgender')], default='Select', max_length=20)),
                ('father_name', models.CharField(max_length=50)),
                ('contact_no', models.CharField(max_length=30)),
                ('address', models.CharField(max_length=100)),
                ('blood_donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.bloodbank_products')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor_fees', models.FloatField(default=200.0)),
                ('appointment_date', models.DateTimeField()),
                ('slot', models.CharField(choices=[('6:00 AM - 9:00 AM', '6:00 AM - 9:00 AM'), ('9:00 AM - 12:00 PM', '9:00 AM - 12:00 PM'), ('12:00 PM - 3:00 PM', '12:00 PM - 3:00 PM'), ('3:00 PM - 6:00 PM', '3:00 PM - 6:00 PM'), ('6:00 PM - 9:00 PM', '6:00 PM - 9:00 PM'), ('9:00 PM - 12:00 AM', '9:00 PM - 12:00 AM')], default='select', max_length=20)),
                ('appointment_priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent'), ('very urgent', 'Very Urgent'), ('low', 'Low')], default='normal', max_length=20)),
                ('payment_mode', models.CharField(choices=[('select', 'Select'), ('pending', 'Pending'), ('approved', 'Approved'), ('cancel', 'Cancel')], default='select', max_length=40)),
                ('message', models.TextField()),
                ('live_consultant', models.CharField(choices=[('no', 'No'), ('yes', 'Yes')], default='select', max_length=10)),
                ('alternate_address', models.TextField()),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.shift')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('staff_id', models.CharField(max_length=20, unique=True)),
                ('role', models.CharField(choices=[('superadmin', 'Super Admin'), ('admin', 'Admin'), ('doctor', 'Doctor'), ('accountant', 'Accountant'), ('receptionist', 'Receptionist'), ('pharmacist', 'Pharmacist'), ('pathologist', 'Pathologist'), ('radiologist', 'Radiologist'), ('patient', 'Patient'), ('user', 'User')], default='user', max_length=20)),
                ('designation', models.CharField(choices=[('doctor', 'Doctor'), ('admin', 'Admin'), ('it admin', 'IT Admin'), ('pathologist', 'Pathologist'), ('pharmacist', 'Pharmacist'), ('radiologist', 'Radiologist'), ('nurse', 'Nurse'), ('accountant', 'Accountant'), ('receptionist', 'Receptionist'), ('driver', 'Driver'), ('technical head', 'Technical Head')], max_length=50)),
                ('department', models.CharField(choices=[('ot', 'OT'), ('doctor', 'Doctor'), ('admin', 'Admin'), ('ipd', 'IPD'), ('opd', 'OPD'), ('icu', 'ICU'), ('blood_bank', 'Blood_Bank'), ('pathology', 'Pathology'), ('radiology', 'Radiology'), ('pharmacy', 'Pharmacy'), ('reception', 'Reception'), ('human resource', 'Human Resource'), ('gynecology', 'Gynecology'), ('finance', 'Finance'), ('emergency', 'Emergency'), ('cardiology', 'Cardiology'), ('burn care', 'BURN CARE'), ('nicu', 'NICU'), ('nursing department', 'Nursing Department')], max_length=50)),
                ('specialist', models.CharField(choices=[('cardiologist', 'Cardiologist'), ('dermatologists', 'Dermatologists'), ('gastroenterologists', 'Gastroenterologists'), ('ophthalmologists', 'Ophthalmologists'), ('neuroradiology', 'Neuroradiology')], max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('father_name', models.CharField(max_length=50)),
                ('mother_name', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('select', 'Select'), ('male', 'Male'), ('female', 'Female'), ('transgender', 'Transgender')], max_length=50)),
                ('marital_status', models.CharField(choices=[('select', 'Select'), ('single', 'Single'), ('married', 'Married'), ('widowed', 'Widowed'), ('separated', 'Separated'), ('not specified', 'Not Specified')], max_length=50)),
                ('blood_group', models.CharField(choices=[('O+', 'O+'), ('A+', 'A+'), ('B+', 'B+'), ('AB+', 'AB+'), ('O-', 'O-'), ('A-', 'A-'), ('B-', 'B-'), ('AB-', 'AB-')], max_length=20)),
                ('dob', models.DateField()),
                ('date_of_joining', models.DateField()),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('emergency_contact', models.CharField(max_length=20, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('photo', models.FileField(upload_to='images/staff/')),
                ('current_address', models.TextField()),
                ('permanent_address', models.TextField()),
                ('qualification', models.TextField()),
                ('work_experience', models.TextField()),
                ('specialization', models.TextField()),
                ('note', models.TextField()),
                ('pan_number', models.CharField(max_length=50)),
                ('national_identification_number', models.CharField(max_length=50)),
                ('local_identification_number', models.CharField(max_length=50)),
                ('reference_contact', models.CharField(max_length=50)),
                ('epf_number', models.CharField(max_length=50)),
                ('basic_salary', models.CharField(max_length=50)),
                ('contract_type', models.CharField(choices=[('permanent', 'Permanent'), ('probation', 'Probation')], max_length=20)),
                ('work_shift', models.CharField(max_length=50)),
                ('work_location', models.CharField(max_length=50)),
                ('casual_leave', models.PositiveIntegerField()),
                ('privilege_leave', models.PositiveIntegerField()),
                ('sick_leave', models.PositiveIntegerField()),
                ('maternity_leave', models.PositiveIntegerField()),
                ('paternity_leave', models.PositiveIntegerField()),
                ('fever_leave', models.PositiveIntegerField()),
                ('account_title', models.CharField(max_length=100)),
                ('bank_account_no', models.CharField(max_length=100)),
                ('bank_name', models.CharField(max_length=100)),
                ('ifsc_code', models.CharField(max_length=100)),
                ('bank_branch_name', models.CharField(max_length=100)),
                ('facebook_url', models.URLField()),
                ('twitter_url', models.URLField()),
                ('linkedin_url', models.URLField()),
                ('instagram_url', models.URLField()),
                ('resume', models.FileField(upload_to='images/staff/resume/')),
                ('joining_letter', models.FileField(upload_to='images/staff/joining_letter')),
                ('other_document', models.FileField(upload_to='images/staff/other_document')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
